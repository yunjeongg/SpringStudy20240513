<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper파일은 실행할 SQL을 적는 파일 -->
<!-- 생성한 mapper파일은 mybatis-config.xml에 사용등록을 해야함. -->

<!-- namespace속성에는 사용할 인터페이스의 풀네임(패키지+인터페이스명)을 적음 -->
<mapper namespace="com.study.springstudy.springmvc.chap04.mapper.BoardMapper">

    <!--    동적 SQL 조건을 분리 -->
    <sql id="search">
        <if test="type == 'title'">
            <!-- 제목이 해당키워드 -->
            <!-- http://localhost:8383/board/list?type=title&keyword=호빵 -->
            WHERE title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="type == 'content'">
            WHERE content LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="type == 'writer'">
            <!-- 작성자가 해당키워드 -->
            <!-- http://localhost:8383/board/list?type=writer&keyword=폼폼푸린 -->
            WHERE writer LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="type == 'tc'">
            <!-- 제목 또는 내용에 해당키워드 -->
            <!-- http://localhost:8383/board/list?type=tc&keyword=빵 -->
            WHERE title LIKE CONCAT('%', #{keyword}, '%')
            OR content LIKE CONCAT('%', #{keyword}, '%')
        </if>
    </sql>

    <!-- 동적SQL SQL이 실시간으로 바뀜 -->
    <select id="findAll" resultType="com.study.springstudy.springmvc.chap04.dto.BoardFindAlldto">
        SELECT
        <!-- 조회하는 데이터를 담을 dto 필요 -->
        B.board_no,
        B.title,
        B.content,
        B.writer,
        B.reg_date_time,
        B.view_count,
        COUNT(R.reply_no) AS reply_count,
        B.account
        FROM tbl_board B
        <!-- inner join 으로 했을 경우 댓글이 1개도 없으면 안됨 -->
        LEFT OUTER JOIN tbl_reply R
        ON B.board_no = R.board_no
        <!-- include = where, group by 가 include 아래로 가야함 -->
        <include refid="search" />
        GROUP BY B.board_no
        ORDER BY board_no DESC
        LIMIT #{pageStart}, #{amount}
    </select>

    <select id="findOne" resultType="board">
        SELECT
        B.board_no, B.title, M.name AS writer
        , B.content, B.view_count
        , B.reg_date_time, M.account
        FROM tbl_board B
        LEFT OUTER JOIN tbl_member M
        ON B.account = M.account
        WHERE board_no = #{boardNo}
    </select>

    <insert id="save">
        INSERT INTO tbl_board
        (title, content, writer, account)
        VALUES (#{title}, #{content}, #{writer}, #{account})
    </insert>

    <delete id="delete">
        DELETE FROM tbl_board
        WHERE board_no = #{boardNo}
    </delete>

    <update id="upViewCount">
        UPDATE tbl_board
        SET view_count = view_count + 1
        WHERE board_no = #{boardNo}
    </update>

    <select id="count" resultType="int">
        SELECT COUNT(*)
        FROM tbl_board
        <include refid="search" />
    </select>

</mapper>